name: Analysis and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DiegoPriess_iteletric-api -Dsonar.sources=src/main/java/com/iteletric/iteletricapi/services

  build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Build project
        run: mvn clean install -DskipTests

      - name: Login Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/iteletric-api .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iteletric-api

  deploy:
    name: Deploy to AWS
    runs-on: self-hosted
    needs: build

    steps:
      - name: Pull image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/iteletric-api:latest

      - name: Remove existing Docker container
        run: sudo docker rm -f iteletric-api

      - name: Run Docker container
        run: sudo docker run -d -p 8080:8080 -e 'DATABASE_USERNAME=${{secrets.DATABASE_USERNAME}}' -e 'DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}}' -e 'DATABASE_URL=${{secrets.DATABASE_URL}}' -e 'JWT_ENCODING=${{secrets.JWT_ENCODING}}' -e 'MAIL_PASS=${{secrets.MAIL_PASS}}' -e 'MAIL_USER=${{secrets.MAIL_USER}}' --name iteletric-api ${{secrets.DOCKER_USERNAME}}/iteletric-api:latest
